name: FRONTEND

on:
  push:
    branches: [master, testing]
    paths: [frontend/**]
    tags: [ v* ]
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    paths: [frontend/**]

env:
  # Use docker.io for Docker Hub (Default) / Use ghcr.io for GitHub Container Registry
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    # Ensures that docker action will not run on pull requests in draft state
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            prefix=frontend-,onlatest=true
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
      -
        name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          # Username and Password for DOCKER HUB
          #username: ${{ secrets.DOCKERHUB_USERNAME }}
          #password: ${{ secrets.DOCKERHUB_TOKEN }}
          # Username and Password for GITHUB CONTAINER REGISTRY
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and Push Docker Image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:frontend"
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

